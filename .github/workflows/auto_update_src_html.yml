name: Run on PR merged with folder changes

on:
  pull_request:
    types:
      - closed
    branches:
      - main   # target branch of the PR
    paths:
      - "doc/distrib/html/*/**"   # matches any subfolder inside projects/

jobs:
  run-on-merge:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # fetches all commits
          
      - name: Detect changed HTML files in doc/distrib/html
        id: changes
        run: |
          # Get changed HTML files under doc/distrib/html/
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep '^doc/distrib/html/.*\.html$' || true)

          echo "Changed HTML files:"
          echo "$CHANGED_FILES"

          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      # 2️⃣ Map files in src/ to full paths
      - name: Map changed files to full paths in src/
        id: map_files
        run: |
          import os
          import subprocess
          import json

          # Get list of changed files from previous step
          changed_files = os.environ.get("CHANGED_FILES", "")
          if not changed_files:
              print("No files provided in CHANGED_FILES")
              changed_files = []

          files = changed_files.split()  # split by space

          file_map = {}

          for f in files:
              filename = os.path.basename(f)

              # Only search inside src/
              result = subprocess.run(
                  ["find", "src", "-type", "f", "-name", filename],
                  capture_output=True, text=True
              )
              paths = [p for p in result.stdout.strip().split("\n") if p]

              # Filter for paths containing "en-US"
              en_us_paths = [p for p in paths if "en-US" in p]

              if en_us_paths:
                  file_map[filename] = os.path.dirname(en_us_paths[0])  # Take the first match that contains en-US
              else:
                  print(f"⚠️ File {filename} not found in src/ with 'en-US' in the path!")

          print("File map:", file_map)

          # Save dictionary as JSON in GitHub Actions output
          with open(os.environ['GITHUB_OUTPUT'], "a") as gh_out:
              gh_out.write(f"file_map={json.dumps(file_map)}\n")
              
        shell: python
        env:
          CHANGED_FILES: ${{ steps.changes.outputs.changed_files }}

      - name: Overwrite files based on changed_files and file_map
        run: |
          import os
          import json
          import shutil

          # 1️⃣ Get dictionary from previous step output
          file_map_json = os.environ.get("FILE_MAP", "{}")
          file_map = json.loads(file_map_json)

          # 2️⃣ Get newline-separated list of changed files from previous step
          changed_files_str = os.environ.get("CHANGED_FILES", "")
          changed_files = [f for f in changed_files_str.strip().split("\n") if f]

          # 4️⃣ Iterate over changed files
          for f in changed_files:
              filename = os.path.basename(f)  # Use filename as key
              if filename in file_map:
                  src_path = f
                  dest_path = os.path.join(file_map[filename], filename)

                  print(f"Copied {src_path} -> {dest_path}")
              else:
                  print(f"⚠️ File '{filename}' not found in file_map")
        shell: python
        env:
          FILE_MAP: ${{ steps.map_files.outputs.file_map }}        # JSON dictionary
          CHANGED_FILES: ${{ steps.changes.outputs.changed_files }} # newline-separated list
