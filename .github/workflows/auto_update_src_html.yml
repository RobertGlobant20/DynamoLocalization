name: Run on PR merged with folder changes

on:
  pull_request:
    types:
      - closed
    branches:
      - main   # target branch of the PR
    paths:
      - "doc/distrib/html/*/**"   # matches any subfolder inside projects/

jobs:
  run-on-merge:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # fetches all commits

      - name: Run custom script
        run: |
          echo "✅ PR was merged and affected files in doc/distrib/html/ or its subfolders"
          
      - name: Detect changed HTML files in doc/distrib/html
        id: changes
        run: |
          # Get changed HTML files under doc/distrib/html/
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep '^doc/distrib/html/.*\.html$' || true)

          echo "Changed HTML files:"
          echo "$CHANGED_FILES"

          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      # 2️⃣ Map files in src/ to full paths
      - name: Map changed files to full paths in src/
        id: map_files
        run: |
          import os
          import subprocess
          import json

          # Get list of changed files from previous step
          changed_files = os.environ.get("CHANGED_FILES", "")
          if not changed_files:
              print("No files provided in CHANGED_FILES")
              changed_files = []

          files = changed_files.split()  # split by space

          file_map = {}

          for f in files:
              # Only search inside src/
              result = subprocess.run(
                  ["find", "src", "-type", "f", "-name", os.path.basename(f)],
                  capture_output=True, text=True
              )
              paths = result.stdout.strip().split("\n")
              if paths and paths[0]:
                  file_map[os.path.basename(f)] = paths[0]
              else:
                  print(f"⚠️ File {f} not found in src/!")

          print("File map:", file_map)

          # Save dictionary as JSON in GitHub Actions output
          with open(os.environ['GITHUB_OUTPUT'], "a") as gh_out:
              gh_out.write(f"file_map={json.dumps(file_map)}\n")
              
        shell: python
        env:
          CHANGED_FILES: ${{ steps.changes.outputs.changed_files }}

      - name: Copy updated HTML files to src/ (preserve structure)
        run: |
          updated=false
          for file in ${{ steps.changes.outputs.changed_files }}; do
            rel_path=${file#doc/distrib/html/}   # strip leading path
            dest="src/$rel_path"
            echo "Copying $file -> $dest"
            updated=true
          done
          echo "updated=$updated" >> $GITHUB_ENV
